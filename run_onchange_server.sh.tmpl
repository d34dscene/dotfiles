#!/usr/bin/env bash

log() { echo -e "\033[1;32m[+]\033[0m $1"; }

{{ if (and (eq .chezmoi.osRelease.id "fedora") (eq .chezmoi.osRelease.variantID "server")) -}}
log "Configuring kernel..."
sudo tee /etc/security/limits.d/99-base.conf <<-EOF
* soft nofile 65535
* hard nofile 65535
EOF

sudo tee /etc/modprobe.d/sunrpc.conf <<-EOF
options sunrpc tcp_slot_table_entries=128
options sunrpc tcp_max_slot_table_entries=128
EOF

sudo tee /etc/sysctl.d/99-sysctl.conf <<-EOF
# Increase TCP buffer sizes for high-speed transfers
net.core.rmem_max=67108864
net.core.wmem_max=67108864
net.core.rmem_default=262144
net.core.wmem_default=262144
net.core.optmem_max=65536

# TCP Memory tuning
net.ipv4.tcp_rmem=4096 87380 67108864
net.ipv4.tcp_wmem=4096 65536 67108864

# Reduce TCP FIN timeout (faster connection closing)
net.ipv4.tcp_fin_timeout=10

# Enable TCP Fast Open (reduces latency for repeated connections)
net.ipv4.tcp_fastopen=3

# Enable TCP BBR congestion control (better than Cubic for modern networks)
net.core.default_qdisc=fq
net.ipv4.tcp_congestion_control=bbr

# Reduce SYN flood attack risk
net.ipv4.tcp_syncookies=1
net.ipv4.tcp_synack_retries=5
net.ipv4.tcp_max_syn_backlog=4096

# Allow more open connections
net.core.somaxconn=65535
net.ipv4.tcp_max_tw_buckets=2000000

# Increase the number of rpc slots for nfs
sunrpc.tcp_slot_table_entries=128

# Increase file descriptors
fs.file-max=2097152

# Increase open file limits per process
fs.nr_open=2097152
fs.inotify.max_user_watches=524288
fs.inotify.max_user_instances=1024

# Reduce swap tendency
vm.swappiness=10

# Enable ASLR (Address Space Layout Randomization)
kernel.randomize_va_space=2

# Enable IP forwarding for Docker networking
net.ipv4.ip_forward = 1
net.ipv6.conf.all.forwarding = 1

# Docker bridge networking
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1

# Disable ICMP redirects (prevents MITM attacks)
net.ipv4.conf.all.accept_redirects=0
net.ipv4.conf.default.accept_redirects=0

# Disable source routing (prevents IP spoofing)
net.ipv4.conf.all.accept_source_route=0
net.ipv4.conf.default.accept_source_route=0

# Reboot on kernel panic
kernel.panic=10
kernel.panic_print=3
kernel.softlockup_panic=1
EOF
sudo sysctl -p

# General packages
log "Installing general packages..."
sudo dnf install -y @development-tools @virtualization \
    dnf-automatic dnf-plugins-core golang rust cargo htop zsh unar git git-lfs \
    openssl curl htop zsh unar git git-lfs lsd fd-find ripgrep fzf tldr ncdu \
    zoxide jq lm_sensors age duf neovim python3-neovim anacron tuned nss-mdns \
    udisks2-btrfs nfs-utils fastfetch xz-devel kernel-devel kernel-headers pipx

# Add docker
log "Installing docker..."
sudo dnf config-manager addrepo --from-repofile="https://download.docker.com/linux/fedora/docker-ce.repo"
sudo dnf install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y
sudo groupadd docker
sudo usermod -aG docker $USER
sudo systemctl enable docker.service
sudo systemctl enable containerd.service
sudo systemctl enable --now avahi-daemon.service

# Make zsh default shell
if type zsh >/dev/null; then
    sudo chsh -s $(which zsh) $USER
fi

# Check if NVIDIA GPU is available
if lspci | grep -i nvidia > /dev/null; then
    log "NVIDIA GPU detected. Adding CUDA repository..."

    sudo dnf install -y \
        https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm \
        https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm

    # Add the appropriate CUDA repo based on the distribution
    sudo dnf install akmod-nvidia xorg-x11-drv-nvidia-cuda cuda-toolkit -y
fi

# Poweroff on buton press
sudo tee /etc/systemd/logind.conf <<-EOF
[Login]
HandlePowerKey=poweroff
EOF

# NFS 
log "Setting up NFS..."
mkdir -p /share
sudo tee /etc/exports <<-EOF
/share 192.168.1.0/24(rw,sync,all_squash,no_subtree_check,crossmnt,anonuid=1000,anongid=1000)
/share 10.0.10.0/24(rw,sync,all_squash,no_subtree_check,crossmnt,anonuid=1000,anongid=1000)
EOF

# Firewall
log "Setting up firewall..."
sudo firewall-cmd --permanent --add-service=ssh
sudo firewall-cmd --permanent --add-service=nfs
sudo firewall-cmd --reload

{{ end -}}
