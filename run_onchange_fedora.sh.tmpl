#!/usr/bin/env bash

log() { echo -e "\033[1;32m[+]\033[0m $1"; }

{{ if eq .chezmoi.osRelease.id "fedora" -}}

configure_dnf() {
   log "Configuring DNF..."
   sudo tee /etc/dnf/dnf.conf >/dev/null <<-EOF
[main]
gpgcheck=1
installonly_limit=3
clean_requirements_on_remove=True
best=False
skip_if_unavailable=True
keepcache=False
countme=True
max_parallel_downloads=10
defaultyes=True
metadata_expire=48h
EOF
}

configure_docker() {
   if ! command -v docker &>/dev/null; then return; fi

   log "Configuring Docker..."
   if command -v nvidia-smi &>/dev/null && command -v nvidia-container-runtime &>/dev/null; then
      sudo tee /etc/docker/daemon.json >/dev/null <<-EOF
{
  "log-driver": "json-file",
  "log-opts": {
    "max-file": "3",
    "max-size": "10m"
  },
  "default-runtime": "nvidia",
  "runtimes": {
    "nvidia": {
      "args": [],
      "path": "nvidia-container-runtime"
    }
  }
}
EOF
   else
      sudo tee /etc/docker/daemon.json >/dev/null <<-EOF
{
  "log-driver": "json-file",
  "log-opts": {
    "max-file": "3",
    "max-size": "10m"
  }
}
EOF
   fi
}

clean_system() {
   log "Cleaning system..."
   sudo dnf autoremove -y
   sudo clean-rpm-gpg-pubkey || true
   sudo symlinks -r -d /usr || true
}

setup_workstation() {
   log "Setting up Fedora Workstation..."

   log "Adding RPM Fusion and Terra..."
   sudo dnf install -y \
      https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm \
      https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm

   sudo dnf install -y rpmfusion-free-release-tainted dnf-plugins-core
   sudo dnf install -y --nogpgcheck --repofrompath 'terra,https://repos.fyralabs.com/terra$releasever' terra-release

   log "Installing media codecs..."
   sudo dnf swap -y ffmpeg-free ffmpeg --allowerasing
   sudo dnf update -y @multimedia --setopt="install_weak_deps=False" --exclude=PackageKit-gstreamer-plugin

   log "Installing workstation packages..."
   sudo dnf install -y \
      @development-tools @virtualization @multimedia \
      golang rust cargo htop zsh unar git git-lfs openssl curl dnf-automatic \
      flatpak lsd fd-find ripgrep fzf tldr ncdu wl-clipboard lm_sensors \
      gnome-tweaks lutris gamescope duf steam-devices yt-dlp jq upx fastfetch \
      ulauncher dconf-editor papirus-icon-theme wireguard-tools clang xz-devel \
      clang-tools-extra python3-devel kernel-devel kernel-headers zoxide \
      python3-pip python3-virtualenv age neovim python3-neovim shellcheck \
      codespell ansible ansible-lint topgrade bandwhich procs bat \
      clean-rpm-gpg-pubkey remove-retired-packages symlinks pipx

   log "Setting zsh as default shell..."
   if command -v zsh &>/dev/null; then
      sudo chsh -s "$(command -v zsh)" "$USER"
   fi

   log "Enabling Flathub..."
   flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo

   log "Installing useful Flatpaks..."
   flatpak install -y --noninteractive flathub \
      com.github.tchx84.Flatseal \
      com.valvesoftware.Steam \
      org.qbittorrent.qBittorrent \
      com.mattjakeman.ExtensionManager \
      io.beekeeperstudio.Studio \
      io.github.nozwock.Packet \
      tv.plex.PlexDesktop \
      org.gimp.GIMP \
      org.signal.Signal \
      it.mijorus.gearlever
}

main() {
   configure_dnf
   configure_docker
   clean_system
   {{ if eq .chezmoi.osRelease.variantID "workstation" -}} setup_workstation {{ end -}}
   log "Done âœ…"
}

main

{{ end -}}
